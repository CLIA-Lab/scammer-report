// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pkg/report/report.proto

package scammer_report

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// The request message containing the user's report.
type ReportRequest struct {
	UserReport           *UserReport `protobuf:"bytes,1,opt,name=user_report,json=userReport,proto3" json:"user_report,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *ReportRequest) Reset()         { *m = ReportRequest{} }
func (m *ReportRequest) String() string { return proto.CompactTextString(m) }
func (*ReportRequest) ProtoMessage()    {}
func (*ReportRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1926ef81aa8e283f, []int{0}
}

func (m *ReportRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReportRequest.Unmarshal(m, b)
}
func (m *ReportRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReportRequest.Marshal(b, m, deterministic)
}
func (m *ReportRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReportRequest.Merge(m, src)
}
func (m *ReportRequest) XXX_Size() int {
	return xxx_messageInfo_ReportRequest.Size(m)
}
func (m *ReportRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ReportRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ReportRequest proto.InternalMessageInfo

func (m *ReportRequest) GetUserReport() *UserReport {
	if m != nil {
		return m.UserReport
	}
	return nil
}

// The response message containing the greetings
type ReportReply struct {
	Bool                 string   `protobuf:"bytes,1,opt,name=bool,proto3" json:"bool,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReportReply) Reset()         { *m = ReportReply{} }
func (m *ReportReply) String() string { return proto.CompactTextString(m) }
func (*ReportReply) ProtoMessage()    {}
func (*ReportReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_1926ef81aa8e283f, []int{1}
}

func (m *ReportReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReportReply.Unmarshal(m, b)
}
func (m *ReportReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReportReply.Marshal(b, m, deterministic)
}
func (m *ReportReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReportReply.Merge(m, src)
}
func (m *ReportReply) XXX_Size() int {
	return xxx_messageInfo_ReportReply.Size(m)
}
func (m *ReportReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ReportReply.DiscardUnknown(m)
}

var xxx_messageInfo_ReportReply proto.InternalMessageInfo

func (m *ReportReply) GetBool() string {
	if m != nil {
		return m.Bool
	}
	return ""
}

//The user's report
type UserReport struct {
	PublicKey            string               `protobuf:"bytes,1,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	Description          []string             `protobuf:"bytes,2,rep,name=description,proto3" json:"description,omitempty"`
	HashTransaction      string               `protobuf:"bytes,3,opt,name=hash_transaction,json=hashTransaction,proto3" json:"hash_transaction,omitempty"`
	Send                 *timestamp.Timestamp `protobuf:"bytes,4,opt,name=send,proto3" json:"send,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *UserReport) Reset()         { *m = UserReport{} }
func (m *UserReport) String() string { return proto.CompactTextString(m) }
func (*UserReport) ProtoMessage()    {}
func (*UserReport) Descriptor() ([]byte, []int) {
	return fileDescriptor_1926ef81aa8e283f, []int{2}
}

func (m *UserReport) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserReport.Unmarshal(m, b)
}
func (m *UserReport) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserReport.Marshal(b, m, deterministic)
}
func (m *UserReport) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserReport.Merge(m, src)
}
func (m *UserReport) XXX_Size() int {
	return xxx_messageInfo_UserReport.Size(m)
}
func (m *UserReport) XXX_DiscardUnknown() {
	xxx_messageInfo_UserReport.DiscardUnknown(m)
}

var xxx_messageInfo_UserReport proto.InternalMessageInfo

func (m *UserReport) GetPublicKey() string {
	if m != nil {
		return m.PublicKey
	}
	return ""
}

func (m *UserReport) GetDescription() []string {
	if m != nil {
		return m.Description
	}
	return nil
}

func (m *UserReport) GetHashTransaction() string {
	if m != nil {
		return m.HashTransaction
	}
	return ""
}

func (m *UserReport) GetSend() *timestamp.Timestamp {
	if m != nil {
		return m.Send
	}
	return nil
}

func init() {
	proto.RegisterType((*ReportRequest)(nil), "report.ReportRequest")
	proto.RegisterType((*ReportReply)(nil), "report.ReportReply")
	proto.RegisterType((*UserReport)(nil), "report.UserReport")
}

func init() { proto.RegisterFile("pkg/report/report.proto", fileDescriptor_1926ef81aa8e283f) }

var fileDescriptor_1926ef81aa8e283f = []byte{
	// 303 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x90, 0xcf, 0x4a, 0xf3, 0x40,
	0x14, 0xc5, 0xbf, 0x7e, 0x2d, 0x85, 0xdc, 0x20, 0xca, 0x88, 0x58, 0x0a, 0x62, 0x0d, 0x2e, 0xea,
	0xa2, 0x13, 0x68, 0x57, 0x2e, 0xb5, 0x82, 0x88, 0x5d, 0x85, 0xba, 0x71, 0x53, 0x66, 0xd2, 0x6b,
	0x1a, 0x9a, 0x64, 0xc6, 0xf9, 0xb3, 0xc8, 0x1b, 0xf9, 0x98, 0xe2, 0xcc, 0xc4, 0xaa, 0xab, 0xb9,
	0xf7, 0xf0, 0x3b, 0x87, 0x3b, 0x07, 0xce, 0xe5, 0xbe, 0x48, 0x15, 0x4a, 0xa1, 0x4c, 0x78, 0xa8,
	0x54, 0xc2, 0x08, 0x32, 0xf4, 0xdb, 0xf8, 0xb2, 0x10, 0xa2, 0xa8, 0x30, 0x75, 0x2a, 0xb7, 0x6f,
	0xa9, 0x29, 0x6b, 0xd4, 0x86, 0xd5, 0xd2, 0x83, 0xc9, 0x03, 0x1c, 0x65, 0x0e, 0xcd, 0xf0, 0xdd,
	0xa2, 0x36, 0x64, 0x01, 0xb1, 0xd5, 0xa8, 0x36, 0x3e, 0x60, 0xd4, 0x9b, 0xf4, 0xa6, 0xf1, 0x9c,
	0xd0, 0x90, 0xfe, 0xa2, 0x51, 0x05, 0x1e, 0xec, 0xf7, 0x9c, 0x5c, 0x41, 0xdc, 0xa5, 0xc8, 0xaa,
	0x25, 0x04, 0x06, 0x5c, 0x88, 0xca, 0x99, 0xa3, 0xcc, 0xcd, 0xc9, 0x47, 0x0f, 0xe0, 0xe0, 0x26,
	0x17, 0x00, 0xd2, 0xf2, 0xaa, 0xcc, 0x37, 0x7b, 0x6c, 0x03, 0x18, 0x79, 0xe5, 0x19, 0x5b, 0x32,
	0x81, 0x78, 0x8b, 0x3a, 0x57, 0xa5, 0x34, 0xa5, 0x68, 0x46, 0xff, 0x27, 0xfd, 0x69, 0x94, 0xfd,
	0x94, 0xc8, 0x0d, 0x9c, 0xec, 0x98, 0xde, 0x6d, 0x8c, 0x62, 0x8d, 0x66, 0xb9, 0xc3, 0xfa, 0x2e,
	0xe6, 0xf8, 0x4b, 0x5f, 0x1f, 0x64, 0x42, 0x61, 0xa0, 0xb1, 0xd9, 0x8e, 0x06, 0xee, 0x2f, 0x63,
	0xea, 0x3b, 0xa1, 0x5d, 0x27, 0x74, 0xdd, 0x75, 0x92, 0x39, 0x6e, 0xbe, 0x84, 0x61, 0xb8, 0xf2,
	0x16, 0xa2, 0x47, 0x34, 0x61, 0x39, 0xeb, 0x4a, 0xf8, 0x55, 0xd8, 0xf8, 0xf4, 0xaf, 0x2c, 0xab,
	0x36, 0xf9, 0x77, 0x7f, 0xfd, 0x9a, 0x14, 0xa5, 0xd9, 0x59, 0x4e, 0x73, 0x51, 0xa7, 0xcb, 0xd5,
	0xd3, 0xdd, 0x6c, 0xc5, 0x78, 0xaa, 0x73, 0x56, 0xd7, 0xa8, 0x66, 0xde, 0xc3, 0x87, 0xee, 0x88,
	0xc5, 0x67, 0x00, 0x00, 0x00, 0xff, 0xff, 0x4d, 0x5e, 0x53, 0x69, 0xc9, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ReportClient is the client API for Report service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ReportClient interface {
	// Get Report URL
	GetReport(ctx context.Context, in *ReportRequest, opts ...grpc.CallOption) (*ReportReply, error)
}

type reportClient struct {
	cc *grpc.ClientConn
}

func NewReportClient(cc *grpc.ClientConn) ReportClient {
	return &reportClient{cc}
}

func (c *reportClient) GetReport(ctx context.Context, in *ReportRequest, opts ...grpc.CallOption) (*ReportReply, error) {
	out := new(ReportReply)
	err := c.cc.Invoke(ctx, "/report.Report/GetReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReportServer is the server API for Report service.
type ReportServer interface {
	// Get Report URL
	GetReport(context.Context, *ReportRequest) (*ReportReply, error)
}

// UnimplementedReportServer can be embedded to have forward compatible implementations.
type UnimplementedReportServer struct {
}

func (*UnimplementedReportServer) GetReport(ctx context.Context, req *ReportRequest) (*ReportReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReport not implemented")
}

func RegisterReportServer(s *grpc.Server, srv ReportServer) {
	s.RegisterService(&_Report_serviceDesc, srv)
}

func _Report_GetReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportServer).GetReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/report.Report/GetReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportServer).GetReport(ctx, req.(*ReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Report_serviceDesc = grpc.ServiceDesc{
	ServiceName: "report.Report",
	HandlerType: (*ReportServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetReport",
			Handler:    _Report_GetReport_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/report/report.proto",
}
